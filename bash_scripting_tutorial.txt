The notes written here have been taken from the following tutorial video: https://youtu.be/e7BufAVwDiM

- When creating a file which contains lines of code that are expected to be executed in Bash, they should be saved with a '.sh' extension.
- Bash stands for 'Bourne-Again Shell'.
- To make sure a .sh file is recognised as an executable script, the following line of text needs to be added to the start of the text file:
    '#! /bin/bash'

- What does this line of text do?
https://stackoverflow.com/questions/8967902/why-do-you-need-to-put-bin-bash-at-the-beginning-of-a-script-file 
- It tells the UNIX machine which iterpreter to use.
- The '#!' combination is known as a 'shebang'.

- How to execute a shell script in terminal:
    - you need to specify the directory and then the .sh file in there that you wish to execute.
    - Majority of instances, you will already be in the directory where the .sh file is, so the command is './[script_name].sh'.
    - The '.' here represents the current directory. This is the relative way of executing the script.
    - You can also give the absolute path to execute it. Eg: absolute path/[script_name].sh
    
- The basics of defining and working with variables in bash:
    - Used the following link for information: https://www.howtogeek.com/442332/how-to-work-with-variables-in-bash/ 
    - When defining a variable, place NO white space between var name, '=' and var value.
    - When you wish to access the value stored in a var_name, place $ in front of var_name.
    - To echo the var_value, place $var_value within "".

Moving on to the interactive tasks that are part of this bash scripting tutorial:

1. Print 'Hello World' in the terminal from a shell script.
    - Use the 'echo' command for this.
    - It allows you to print whatever string (within "") follows echo.

2. Redirect to a file
    - The output of any bash command can be redirected to an output file using the '>' or '>>' symbol followed by the filename.
    - > sets the cursor to the beginning of the file, while >> adds the cursor to the end of the file so the previous writes are not overwritten.

3. Multi-line commenting
    - : '
        What if you had many lines that you were using to convey to the users what the downstream lines of code are meant to do.
        Rather than commenting each line of text individually, you can use multi-line commenting, which works very similar to Python.
        You can place all the text within quotes that are followed by a colon. This is the python equivalent of using """ text """
        '
    - Heredoc delimiter:
        - Normal commented lines of text are not printed in the terminal when the shell script is run.
        - But what if you wanted certain text to be displayed in the terminal as the script runs?
        - You can use Heredoc to achieve this.
        - This syntax for this is:
            cat << [delimiter]
            write text here
            [delimiter]
        - Any text that is present in between the delimiters will be printed in the terminal.

4. Conditional statements:
    - The condition that follows 'if' can be written in [  ] for general conditions.
    - If you want bash to perform some arithmetic, then place the condition within ((  )).
    - Always make sure there is white space between the condition and the brackets. Otherwise bash might not process the condition correctly.
    - In one line, you write 'if' or 'elif' with the condition. In the next line you write 'then' followed by command you wish to get executed
        if the condition is met.
    - There is no need to 'then' in the next line after 'else'. Can just write the code block to be executed after else directly.
    - The 'And' condition can be added in bash using '&&' when using double brackets. Can also be used as '-a' when using single [  ] brackets to set conditions.
    - The 'Or' condition can be added using '||' with double brackets and '-0' when using single brackets.

    - Case Statements:
        - Used the following link to learn the syntax for case statements in Bash:
        https://linuxize.com/post/bash-case-statement/ 

5. Loops in Bash
    - 

